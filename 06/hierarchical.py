# -*- coding: utf-8 -*-
"""E06_MLL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18QIaO2G5gxPkrcWVm4MSPGmwE98TqswL
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from sklearn.preprocessing import normalize
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.cluster import AgglomerativeClustering
# %matplotlib inline

data=pd.read_csv("Wholesale customers data.csv")
print(data.head())

#normalize the data
scaled=normalize(data)
scaled=pd.DataFrame(scaled,columns=data.columns)
print(scaled.head())

#dendrogram to determine the number of clusters
#x axis: samples ; y axis: distance between samples
plt.figure(figsize=(10,7))
plt.title("Dendrogram")
Z=linkage(scaled,method='ward')
dendrograms=dendrogram(Z)

#threshold
#from the dendrogram we choose y=6 as the threshold
plt.figure(figsize=(10,7))
plt.title("Dendrogram")
Z=linkage(scaled,method='ward')
dendrograms=dendrogram(Z)
plt.axhline(y=6,color='black')

cluster = AgglomerativeClustering(n_clusters=2, linkage='ward')
cluster.fit_predict(scaled)
cluster = AgglomerativeClustering(n_clusters=2, linkage='complete', metric='euclidean')
cluster.fit_predict(scaled)

#visualization
plt.figure(figsize=(10,7))
plt.scatter(scaled['Milk'],scaled['Grocery'],c=cluster.labels_,cmap = mcolors.ListedColormap(["yellow", "green"]))

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import scipy.cluster.hierarchy as sch

# Load the dataset
file_path = '/content/Wholesale customers data.csv'
wholesale_data = pd.read_csv(file_path)

# Select the spending columns for clustering
spending_data = wholesale_data.iloc[:, 2:]

# Normalize the data
scaler = StandardScaler()
spending_data_normalized = scaler.fit_transform(spending_data)

# Plot the dendrogram to find the optimal number of clusters
plt.figure(figsize=(10, 7))
dendrogram = sch.dendrogram(sch.linkage(spending_data_normalized, method='ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean Distances')
plt.show()


agg_clustering = AgglomerativeClustering(n_clusters=4, linkage='ward')
cluster_labels = agg_clustering.fit_predict(spending_data_normalized)

# Calculate the silhouette score to evaluate clustering
silhouette_avg = silhouette_score(spending_data_normalized, cluster_labels)

# Output the silhouette score
silhouette_avg